#include <iostream>

#include <vector>
#include <chrono> 
#include <random> 
#include <algorithm>

using namespace std;
using namespace std::chrono;

void imprimirVetor(const vector<int> &v) {
    for (int num : v) {
        cout << num << " ";
    }
    cout << endl;
}

vector<int> gerarVetorAleatorio(int n) {
    vector<int> v(n);
    iota(v.begin(), v.end(), 1); 
    random_device rd;
    mt19937 g(rd());
    shuffle(v.begin(), v.end(), g); 
    return v;
}

template<typename Func>
double medirTempoOrdenacao(Func funcaoOrdenacao, vector<int>& v) {
    auto inicio = high_resolution_clock::now();
    funcaoOrdenacao(v);
    auto fim = high_resolution_clock::now();
    auto duracao = duration_cast<microseconds>(fim - inicio);
    return duracao.count() / 1000.0; 
}

void bubbleSort(vector<int>& v) {
    int n = v.size();
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (v[j] > v[j + 1]) {
                swap(v[j], v[j + 1]);
            }
        }
    }
}

void selectionSort(vector<int>& v) {
    int n = v.size();
    for (int i = 0; i < n - 1; ++i) {
        int minIndex = i;
        for (int j = i + 1; j < n; ++j) {
            if (v[j] < v[minIndex]) {
                minIndex = j;
            }
        }
        swap(v[i], v[minIndex]);
    }
}

void insertionSort(vector<int>& v) {
    int n = v.size();
    for (int i = 1; i < n; ++i) {
        int key = v[i];
        int j = i - 1;
        while (j >= 0 && v[j] > key) {
            v[j + 1] = v[j];
            --j;
        }
        v[j + 1] = key;
    }
}

void shellSort(vector<int>& v) {
    int n = v.size();
    for (int g = n / 2; g > 0; g /= 2) {
        for (int i = g; i < n; ++i) {
            int temp = v[i];
            int j = i;
            while (j >= g && v[j - g] > temp) {
                v[j] = v[j - g];
                j -= g;
            }
            v[j] = temp;
        }
    }
}

int partition(vector<int>& v, int low, int high) {
    int pivot = v[high];
    int i = low - 1;
    for (int j = low; j < high; ++j) {
        if (v[j] < pivot) {
            ++i;
            swap(v[i], v[j]);
        }
    }
    swap(v[i + 1], v[high]);
    return i + 1;
}

void quickSort(vector<int>& v, int low, int high) {
    if (low < high) {
        int pi = partition(v, low, high);
        quickSort(v, low, pi - 1);
        quickSort(v, pi + 1, high);
    }
}

void merge(vector<int>& v, int low, int mid, int high) {
    int n1 = mid - low + 1;
    int n2 = high - mid;
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; ++i) {
        L[i] = v[low + i];
    }
    for (int j = 0; j < n2; ++j) {
        R[j] = v[mid + 1 + j];
    }
    int i = 0, j = 0, k = low;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            v[k] = L[i];
            ++i;
        } else {
            v[k] = R[j];
            ++j;
        }
        ++k;
    }
    while (i < n1) {
        v[k] = L[i];
        ++i;
        ++k;
    }
    while (j < n2) {
        v[k] = R[j];
        ++j;
        ++k;
    }
}

void mergeSort(vector<int>& v, int low, int high) {
    if (low < high) {
        int mid = low + (high - low) / 2;
        mergeSort(v, low, mid);
        mergeSort(v, mid + 1, high);
        merge(v, low, mid, high);
    }
}

void testarTemposDeExecucao(int tamanho) {
    vector<int> vetor = gerarVetorAleatorio(tamanho);
    vector<int> vetorCopia(vetor);

    cout << "Tamanho do vetor: " << tamanho << endl;

    cout << "Tempo de execução do Bubble Sort: " << medirTempoOrdenacao(bubbleSort, vetor) << " milissegundos" << endl;

    vetor = vetorCopia;

    cout << "Tempo de execução do Selection Sort: " << medirTempoOrdenacao(selectionSort, vetor) << " milissegundos" << endl;

    vetor = vetorCopia;

    cout << "Tempo de execução do Insertion Sort: " << medirTempoOrdenacao(insertionSort, vetor) << " milissegundos" << endl;

    vetor = vetorCopia;

    cout << "Tempo de execução do Shell Sort: " << medirTempoOrdenacao(shellSort, vetor) << " milissegundos" << endl;

    vetor = vetorCopia;

    cout << "Tempo de execução do Quick Sort: " << medirTempoOrdenacao([&vetor](vector<int>& v) { quickSort(v, 0, v.size() - 1); }, vetor) << " milissegundos" << endl;

    vetor = vetorCopia;

    cout << "Tempo de execução do Merge Sort: " << medirTempoOrdenacao([&vetor](vector<int>& v) { mergeSort(v, 0, v.size() - 1); }, vetor) << " milissegundos" << endl;
}

int main() {
    testarTemposDeExecucao(10);
    testarTemposDeExecucao(100);
    testarTemposDeExecucao(1000);
    testarTemposDeExecucao(10000);
    testarTemposDeExecucao(100000);
    testarTemposDeExecucao(1000000);

    return 0;  
}
